
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using eStore.Repositories;
using eStore.Services.Interfaces;
using Newtonsoft.Json;

namespace eStore.Services
{
    public class LanguageService(IConfiguration configuration, HttpClient httpClient, IStoreRepository storeRepository) : ILanguageService
    {
        private readonly HttpClient _httpClient = httpClient;
        private readonly IConfiguration _configuration = configuration;
        private IStoreRepository _storeRepository = storeRepository;

        /// <summary>
        /// Gets the response asynchronously based on the user input.
        /// </summary>
        /// <param name="userInput">The user input to process.</param>
        /// <returns>The response generated by processing the user input.</returns>
        public async Task<BotResponse> GetResponseAsync(string userInput)
        {
            var key = _configuration["LanguageService:Key"];
            var endpoint = _configuration["LanguageService:Endpoint"];

            try
            {               
                var categories = _storeRepository.GetProducts().Select(p => p.Category).Distinct().ToArray().ToString();

                var request = new HttpRequestMessage(HttpMethod.Post, endpoint);
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", key);
                request.Content = new StringContent(JsonConvert.SerializeObject(new
                {
                    model = "gpt-3.5-turbo",
                    messages = new[]
                    {
                        new
                        {
                            role = "system",
                            content = @"
                                You are a helpful assistant. When a user asks about products, objects, or nouns, follow these guidelines:
                                1. Provide the name of the products, objects, or something related to the provided categories in the 'product' field as an array and set 'is_related_to_product' to true.
                                2. Provide a short description in the 'natural_response' field in the same language as the user’s input only if the query explicitly refers to a product or object. Do not infer the existence of the product; just provide a description if applicable.
                                3. Provide the literal translation of 'The filtered results are displayed on the screen.' in the 'product_available_response' field in the same language as the user’s input.
                                4. Provide the literal translation of 'No results were found. Would you like to try with something else?' in the 'product_unavailable_response' field in the same language as the user’s input.
                                5. Suggest names of products, objects, or nouns in the 'product' field as an array when explicitly or implicitly asked for one or more products. Otherwise, leave the 'product' field as an empty array. Always fill the array with the names of the products in English.
                                6. If the query asks for something but does not provide a relevant product, object, material, or something related to the provided categories, set 'is_non_relevant_query' to true and state in 'natural_response' that you cannot assist further unless a specific product or object is specified. If the user’s input only mentions items or products, interpret the input as a request for information about the products.
                                7. Guide the user to ask specifically about products, objects, or something related to the provided categories.
                                8. If the input is just a greeting, respond with a greeting and ask what products they are looking for.
                                9. If the input is just a farewell, respond with a farewell and suggest that you are ready to assist them on another occasion.
                                10. Always provide the response in the same language as the user’s input in the 'natural_response' field considering points 2, 6, 8, and 9."
                        },
                        new { role = "user", content = "This is the user’s input: '" + userInput + "'" + $". If there are products associated with the element, compare them with the provided categories: {categories} and indicate if they match."
                        + @"Return the answer in the following JSON format: 
                            {
                                'product': <product_array>,
                                'is_related_to_category': <true_or_false>,
                                'natural_response': '<short_response>',
                                'is_related_to_product': <true_or_false>,
                                'is_greeting': <true_or_false>,
                                'is_farewell': <true_or_false>,
                                'is_non_relevant_query': <true_or_false>,
                                'product_available_response': <product_available_trasnlation>,
                                'product_unavailable_response': <product_unavailable_trasnlation>
                            }"}
                    },
                    max_tokens = 150
                }), Encoding.UTF8, "application/json");

                var response = await _httpClient.SendAsync(request);

                if (!response.IsSuccessStatusCode)
                {
                    throw new Exception($"Error: {response.ReasonPhrase}");
                }

                var responseContent = await response.Content.ReadAsStringAsync();

                var deserializedResponse = JsonConvert.DeserializeObject<OpenAiResponse>(responseContent) ?? throw new Exception("Sorry, I couldn't process your request.");

                var content = deserializedResponse.Choices[0].Message.Content;
                content = content.Replace("'", "\"");

                var chatResponse = JsonConvert.DeserializeObject<BotResponse>(content) ?? throw new Exception("Sorry, I couldn't process your request.");

                bool areThereProducts = _storeRepository.GetProducts().AsEnumerable().Any(p => chatResponse.Product.Any(name => Regex.IsMatch(p.Name, $@"\b{name}\b", RegexOptions.IgnoreCase)) || 
                                                                        chatResponse.Product.Any(name => p.Description != null && Regex.IsMatch(p.Description, $@"\b{name}\b", RegexOptions.IgnoreCase)));
                
                if (areThereProducts)
                {
                    chatResponse.Natural_Response += $" {chatResponse.Product_Available_Response}";
                }
                else if(chatResponse.Product.Count != 0)
                {
                    chatResponse.Natural_Response += $" {chatResponse.Product_Unavailable_Response}";
                }
                
                return chatResponse;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message + $" Endpoint: {endpoint}");
            }
    
            
        }
    }

    
    
}

